<% content_for :title, @jester %>

<% content_for :header do %>
  <div class="grid_12 alpha omega">
    <h1><%= portrait @jester, 48 %> <%= @jester %> <%= content_tag :small, "← that’s you!" if current_jester == @jester %></h1>
    <%= link_to "Edit", edit_jester_path(@jester), :class => "edit button" if can?(:edit, @jester) %>
  </div>
<% end %>

<div class="info-summary">
  <div class="grid_4 alpha">
    <dl class="last-show-played-summary">
      <dt>Last played</dt>
      <% if @jester.last_played %>
        <dd><%= link_to extended_date(@jester.last_played_on), show_path(*@jester.last_played_on.params) %></dd>
      <% else %>
        <dd class="never">(never)</dd>
      <% end %>
    </dl>
  </div>
  <div class="grid_4">
    <dl class="last-show-mced-summary">
      <dt>Last MCed</dt>
      <% if @jester.last_mced %>
        <dd><%= link_to extended_date(@jester.last_mced_on), show_path(*@jester.last_mced_on.params) %></dd>
      <% else %>
        <dd class="never">(never)</dd>
      <% end %>
    </dl>
  </div>
  <div class="grid_4 omega">
    <dl class="current-percentage-summary">
      <dt>Current percentage</dt>
      <dd title="The first number is the amount of time you play (not MC) when you are available. The second number is how often you are available to play."><%= "%.1f%%" % @jester.percentage(90.days) %> <i><%= "/ %.1f%%" % @jester.availability_percentage(90.days) %></i> <small>(Last 90 days)</small></dd>
    </dl>
  </div>
</div>

<div class="grid_12 alpha omega explain last-show-played">
  <h2>Last show played</h2>
  <% if @jester.last_played %>
    <%= render @jester.last_played %>
  <% else %>
    <p class="never"><%= @jester %> has <strong>never</strong> played a show.</p>
  <% end %>
</div>

<div class="grid_12 alpha omega explain last-show-mced">
  <h2>Last show MCed</h2>
  <% if @jester.last_mced %>
    <%= render @jester.last_mced %>
  <% else %>
    <p class="never"><%= @jester %> has <strong>never</strong> MCed a show.</p>
  <% end %>
</div>

<div class="grid_12 alpha omega explain current-percentage">
  <div class="graph" title="The white line is how often you've played over the last 90 days. Green lines are shows when you were available, and red lines are when you weren't. Green dots are when you played, and blue dots are when you MCed.">
    <canvas></canvas>
  </div>
</div>

<div class="grid_4 alpha favourites">
  <h2 title="The players alongside whom this Jester is most often cast">Often seen with</h2>
  <%= render :partial => "favourite", :collection => @jester.most_seen_with %>
</div>

<div class="grid_4 favourites">
  <h2 title="The players most frequently cast when this Jester has MCed">Casting favourites</h2>
  <%= render :partial => "favourite", :collection => @jester.favourite_players %>
</div>

<div class="grid_4 omega">
  <dl>
    <dt>Recent play</dt>
    <dd><%= recent_play @jester %></dd>
    <dt>Ushering</dt>
    <dd><%= recent_ushering @jester %> <small><strong>Note:</strong> Ushering records unavailable before 2011.</small></dd>
  </dl>
</div>

<%= clear_floats %>

<% content_for :scripts do %>
  <script type="text/javascript" charset="utf-8">
    var play_data = [];
    var availability = {};
    
    function rollingPercentage(date, window) {
      date = date || (new Date()).getTime();
      window = window || (90 * 24 * 60 * 60 * 1000); // 90-day window
      var slice = play_data.filter(function(d) {
        return (d[0] >= date - window) && (d[0] <= date);
      });
      if (slice.length) {
        return 100.0 * slice.filter(function(d) { return d[1] == 'player'; }).length / slice.length;
      } else {
        return 0.0;
      }
    }
    
    function formatDate(date) {
      return (date.getYear() + 1900) + '-' + (date.getMonth() + 1) + '-' + date.getDate();
    }
  
    window.addEvent('domready', function() {
      if (!Browser.Platform.iphone) {
        $$('.last-show-played-summary, .last-show-mced-summary, .current-percentage-summary').addEvent('click', function() {
          $$('.explain.' + this.get('class').replace(/-summary.*$/, ''))[0].setStyles({ display:'block' }).getSiblings('.explain').setStyles({ display:'none' });
          return false;
        })[2].fireEvent('click');
      
        new Request.JSON({
    			url: '<%= jester_data_path(@jester, :json) %>',
    			method: 'get',
    			onComplete: function(data) {
    			  play_data = data.points.map(function(d) {
    			    dmy = d[0].split('-');
    			    var date = new Date(parseInt(dmy[0]), parseInt(dmy[1] - 1), parseInt(dmy[2]));
    			    availability[formatDate(date)] = d[1];
    			    return [ date.getTime(), d[1] ];
    			  });
  			  
    			  graph = $$('.graph canvas')[0];
    			  graph.width = 752;
    			  graph.height = 128;
    			  context = graph.getContext('2d');
  			  
    			  var one_day = 24 * 60 * 60 * 1000;
    			  var date = (new Date()).getTime(), window = 365 * one_day;
    			  date -= date % one_day;
    			  
            for (i = date - window; i < date; i+= one_day) {
              var d = new Date(i), w = d.getDay();
              if (w == 5 || w == 6) {
                var x = (i - (date - window)) * 752 / window;
                context.strokeStyle = availability[formatDate(d)] ? 'rgba(141,198,63,0.25)' : 'rgba(237,28,36,0.5)';
                context.lineWidth = 1;
        			  context.beginPath();
        			  context.moveTo(x, 0);
        			  context.lineTo(x, 112);
        			  context.stroke();
              }
            }

    			  context.strokeStyle = '#ccc';
    			  context.lineCap = 'round';
    			  context.lineWidth = 2;
    			  context.beginPath();
  			  
    			  var pen = false;
    			  var pts = [];
    			  var p = 0;
  			  
    			  for (i = 0; i <= window; i += 7 * one_day) {
    			    p = rollingPercentage(date - window + i);
    			    var x = i * 752.0 / window, y = 112 * rollingPercentage(date - window + i) / 100.0;
              pts.push(x);
              pts.push(112-y);
    			  }
            
            drawSpline(context, pts, 0.2);

            play_data.each(function(d) {
              if (d[1] == 'player' || d[1] == 'mc') {
                context.fillStyle = d[1] == 'player' ? 'rgba(141,198,63,0.5)' : 'rgba(0,174,239,0.5)';
                x = (d[0] - (date - window)) * 752 / window;
                context.beginPath();
                context.arc(x, 120 + (d[1] == 'mc' ? 4 : 0), 4, 0, Math.PI * 2, false);
                context.fill();
              }
            });
          
    			}
    		}).send();
    	}
    });
    
    function getControlPoints(x0,y0,x1,y1,x2,y2,t){
      //  x0,y0,x1,y1 are the coordinates of the end (knot) pts of this segment
      //  x2,y2 is the next knot -- not connected here but needed to calculate p2
      //  p1 is the control point calculated here, from x1 back toward x0.
      //  p2 is the next control point, calculated here and returned to become the 
      //  next segment's p1.
      //  t is the 'tension' which controls how far the control points spread.

      //  Scaling factors: distances from this knot to the previous and following knots.
      var d01=Math.sqrt(Math.pow(x1-x0,2)+Math.pow(y1-y0,2));
      var d12=Math.sqrt(Math.pow(x2-x1,2)+Math.pow(y2-y1,2));

      var fa=t*d01/(d01+d12);
      var fb=t-fa;

      var p1x=x1+fa*(x0-x2);
      var p1y=y1+fa*(y0-y2);

      var p2x=x1-fb*(x0-x2);
      var p2y=y1-fb*(y0-y2);  

      return [p1x,p1y,p2x,p2y];
    }
    
    function drawSpline(ctx,pts,t){
        ctx.lineWidth=4;
        ctx.save();
        var cp=[];   // array of control points, as x0,y0,x1,y1,...
        var n=pts.length;

        // Draw an open curve, not connected at the ends
        for(var i=0;i<n-4;i+=2){
            cp=cp.concat(getControlPoints(pts[i],pts[i+1],pts[i+2],pts[i+3],pts[i+4],pts[i+5],t));
        }    
        for(var i=2;i<pts.length-5;i+=2){
            ctx.beginPath();
            ctx.moveTo(pts[i],pts[i+1]);
            ctx.bezierCurveTo(cp[2*i-2],cp[2*i-1],cp[2*i],cp[2*i+1],pts[i+2],pts[i+3]);
            ctx.stroke();
            ctx.closePath();
        }
        //  For open curves the first and last arcs are simple quadratics.
        ctx.beginPath();
        ctx.moveTo(pts[0],pts[1]);
        ctx.quadraticCurveTo(cp[0],cp[1],pts[2],pts[3]);
        ctx.stroke();
        ctx.closePath();

        ctx.beginPath();
        ctx.moveTo(pts[n-2],pts[n-1]);
        ctx.quadraticCurveTo(cp[2*n-10],cp[2*n-9],pts[n-4],pts[n-3]);
        ctx.stroke();
        ctx.closePath();
        ctx.restore();
    }
    
  </script>
<% end %>